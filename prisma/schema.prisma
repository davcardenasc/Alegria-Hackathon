// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  id              String   @id @default(cuid())
  submittedAt     DateTime @default(now())
  teamName        String
  participantsCount Int
  participants    String   // JSON array of participant names
  school          String
  gradeOrYear     String
  contactEmail    String
  idDocumentUrl   String?
  experienceText  String?
  motivationText  String
  ideasText       String?
  status          ApplicationStatus @default(PENDING)
  starred         Boolean  @default(false)
  reviewedBy      String?
  reviewedAt      DateTime?
  
  // Additional metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  reviewer        User?    @relation(fields: [reviewedBy], references: [id])
  emailLogs       EmailLog[]
  
  // Performance indexes for frequently queried fields
  @@index([status])
  @@index([starred])
  @@index([submittedAt])
  @@index([school])
  @@index([contactEmail])
  @@index([reviewedBy])
  @@index([status, starred]) // Composite index for admin dashboard filtering
  @@map("applications")
}

model SchoolApplication {
  id                  String   @id @default(cuid())
  submittedAt         DateTime @default(now())
  schoolName          String
  coordinatorName     String
  coordinatorEmail    String
  phone               String
  numStudents         Int
  preferredDates      String   // JSON array of selected dates
  comments            String?
  status              ApplicationStatus @default(PENDING)
  starred             Boolean  @default(false)
  reviewedBy          String?
  reviewedAt          DateTime?
  
  // Additional metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  reviewer            User?    @relation("SchoolApplicationReviewer", fields: [reviewedBy], references: [id])
  
  // Performance indexes for frequently queried fields
  @@index([status])
  @@index([starred])
  @@index([submittedAt])
  @@index([schoolName])
  @@index([coordinatorEmail])
  @@index([reviewedBy])
  @@index([status, starred]) // Composite index for admin dashboard filtering
  @@map("school_applications")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  role          UserRole @default(REVIEWER)
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  reviewedApplications Application[]
  reviewedSchoolApplications SchoolApplication[] @relation("SchoolApplicationReviewer")
  
  @@map("users")
}

model EmailTemplate {
  id          String        @id @default(cuid())
  type        EmailType
  subject     String
  body        String        // HTML content with placeholders
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@map("email_templates")
}

model EmailLog {
  id              String      @id @default(cuid())
  applicationId   String
  type            EmailType
  recipientEmail  String
  subject         String
  sentAt          DateTime    @default(now())
  status          EmailStatus @default(SENT)
  errorMessage    String?
  
  // Relations
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  
  // Performance indexes for email audit queries
  @@index([applicationId])
  @@index([recipientEmail])
  @@index([sentAt])
  @@index([status])
  @@index([type])
  @@map("email_logs")
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRole {
  REVIEWER
  ADMINISTRATOR
}

enum EmailType {
  ACCEPTANCE
  REJECTION
}

enum EmailStatus {
  SENT
  FAILED
  PENDING
}
